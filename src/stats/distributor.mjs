const criteria = {
  name: "C1",
  weight: 1,
  blur: 0,
  data: [
    {
      reference: 0,
      // Seed and order represent the permutation
      seed: Math.random(),
      order: 0,
      // Generated by the distribution
      distribution: {
        uniform: { value: 0, lowerBound: 0, numberDominating: 0 },
      },
    },
  ],
};

function Criteria(name, alternativeCount, blur, weight) {
  this.name = name;
  this.weight = weight;
  this.blur = blur;
  this.data = Array(alternativeCount)
    .fill(1)
    .map((e, i) => ({
      reference: i,
      // Seed and order represent the permutation
      seed: Math.random(),
      order: 0,
      // Generated by the distribution
      distribution: {},
    }))
    .sort(sorter("seed"))
    .forEach((element, index) => (element.order = index));
}

function generatePermutation(criteriaCount, alternativeCount) {
  const permutations = Array(criteriaCount)
    .fill(1)
    .map((e, i) => new Criteria(`C${i}`, alternativeCount));
  return permutations;
}

const sorter = (key) => (a, b) => a[key] - b[key];
